{"version":3,"file":"preact-i18n.esm.js","sources":["../src/lib/util.js","../src/components/intl-provider.js","../src/intl.js","../src/lib/template.js","../src/lib/translate.js","../src/components/highlight-i18n.js","../src/components/text.js","../src/lib/translate-mapping.js","../src/components/localizer.js","../src/components/markup-text.js","../src/components/with-text.js","../src/index.js"],"sourcesContent":["/** Check if an object is not null or undefined\r\n *\t@private\r\n */\r\nexport function defined(obj) {\r\n\treturn obj!==null && obj!==undefined;\r\n}\r\n\r\n\r\n/** A simpler Object.assign\r\n *  @private\r\n */\r\nexport function assign(obj, props) {\r\n\tfor (let i in props) {\r\n\t\tobj[i] = props[i];\r\n\t}\r\n\treturn obj;\r\n}\r\n\r\n\r\n/** Recursively copy keys from `source` to `target`, skipping truthy values already in `target`.\r\n *\t@private\r\n */\r\nexport function deepAssign(target, source) {\r\n\tlet out = assign({}, target);\r\n\tfor (let i in source) {\r\n\t\tif (source.hasOwnProperty(i)) {\r\n\t\t\tif (target[i] && source[i] && typeof target[i]==='object' && typeof source[i]==='object') {\r\n\t\t\t\tout[i] = deepAssign(target[i], source[i]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tout[i] = target[i] || source[i];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn out;\r\n}\r\n\r\n/** select('foo,bar') creates a mapping: `{ foo, bar }`\r\n *\t@private\r\n */\r\nexport function select(properties) {\r\n\tproperties = properties || {};\r\n\tif (typeof properties==='string') {\r\n\t\tproperties = properties.split(',');\r\n\t}\r\n\tif ('join' in properties) {\r\n\t\tlet selected = {};\r\n\t\tfor (let i=0; i<properties.length; i++) {\r\n\t\t\tlet val = properties[i].trim();\r\n\t\t\tif (val) selected[val.split('.').pop()] = val;\r\n\t\t}\r\n\t\treturn selected;\r\n\t}\r\n\treturn properties;\r\n}\r\n","import { h, Component } from 'preact';\r\nimport { assign, deepAssign } from '../lib/util';\r\n\r\n\r\nconst URL_FLAG = /[?&#]intl=show/;\r\n\r\n\r\n/** `<IntlProvider>` is a nestable internationalization definition provider.\r\n *\tIt exposes an Intl scope & definition into the tree,\r\n *\tmaking them available to descendant components.\r\n *\r\n *\t> **Note:** When nested, gives precedence to keys higher up the tree!\r\n *\t> This means lower-level components can set their defaults by wrapping themselves\r\n *\t> in an `<IntlProvider>`, but still remain localizable by their parent components.\r\n *\r\n *\t@name IntlProvider\r\n *\t@param props\r\n *\t@param {String} [props.scope]\t\t\tNest `definition` under a root key, and set the active scope for the tree (essentially prefixing all `<Text />` keys).\r\n *\t@param {Boolean} [props.mark=false]\t\tIf `true`, all `<Text>` elements will be shown with a red/green background indicating whether they have valid Intl keys.\r\n *\t@param {Object} [props.definition={}]\tMerge the given definition into the current intl definition, giving the *current* definition precedence (i.e., only adding keys, acting as defaults)\r\n *\r\n *\t@example\r\n *\t// generally imported from a JSON file:\r\n *\tlet definition = {\r\n *\t\tfoo: 'Le Feux'\r\n *\t};\r\n *\r\n *\t<IntlProvider scope=\"weather\" definition={definition}>\r\n *\t\t<Text key=\"foo\">The Foo</Text>\r\n *\t</IntlProvider>\r\n *\r\n *\t// This will render the text:\r\n *\t\"Le Feux\"\r\n */\r\nexport class IntlProvider extends Component {\r\n\tgetChildContext() {\r\n\t\tlet { scope, definition, mark, provider } = this.props,\r\n\t\t\tintl = assign({}, this.context.intl || {});\r\n\r\n\t\t// set active scope for the tree if given\r\n\t\tif (scope) intl.scope = scope;\r\n\r\n\t\t// merge definition into current with lower precedence\r\n\t\tif (definition) {\r\n\t\t\tintl.dictionary = deepAssign(intl.dictionary || {}, definition);\r\n\t\t}\r\n\r\n\t\tif (mark || (typeof location!=='undefined' && String(location).match(URL_FLAG))) {\r\n\t\t\tintl.mark = true;\r\n\t\t}\r\n\r\n\t\tintl.provider = provider;\r\n\r\n\t\treturn { intl };\r\n\t}\r\n\r\n\trender({ children }) {\r\n\t\treturn children;\r\n\t}\r\n}\r\n","import { h } from 'preact';\r\nimport { IntlProvider } from './components/intl-provider';\r\n\r\n\r\n/**\r\n * Higher-order function that creates an `<IntlProvider />` wrapper component for the given component.  It\r\n * takes two forms depending on how many arguments it's given:\r\n * It can take a functional form like:\r\n * intl(ComponentToWrap, options)\r\n *\r\n * or it can take an annotation form like:\r\n * @intl(options)\r\n * class ComponentToWrap extends Component {}\r\n *\r\n *    @param {Component or Object} args[0] If there are two arguments, the first argument is the Component to wrap in `<IntlProvider/>`. If there is just one argument, this is the options object to pass as `props` to `<IntlProvider/>`. See the definition of the options param below for details.\r\n *    @param {Object} options If there are two arguments, the second argument is Passed as `props` to `<IntlProvider />`\r\n *    @param [options.scope]            Nest `definition` under a root key, and set the active scope for the tree (essentially prefixing all `<Text />` keys).\r\n *    @param [options.definition={}]    Merge the given definition into the current intl definition, giving the *current* definition precedence (i.e., only adding keys, acting as defaults)\r\n *    @param [options.provider=defaultProvider] Provider function to use to get the plural form to use from the dictionary\r\n */\r\nexport function intl(Child, options) {\r\n\tif (arguments.length < 2) {\r\n\t\toptions = Child;\r\n\t\treturn Child => intl(Child, options);\r\n\t}\r\n\tfunction IntlProviderWrapper(props) {\r\n\t\treturn h(\r\n\t\t\tIntlProvider,\r\n\t\t\toptions || {},\r\n\t\t\th(Child, props)\r\n\t\t);\r\n\t}\r\n\r\n\tIntlProviderWrapper.getWrappedComponent = Child && Child.getWrappedComponent || (() => Child);\r\n\treturn IntlProviderWrapper;\r\n}\r\n","const EMPTY = {};\r\n\r\nlet currentFields;\r\n\r\n/** Populate {{template.fields}} within a given string.\r\n *\r\n *\t@private\r\n *\t@param {String} template\tThe string containing fields to be resolved\r\n *\t@param {Object} [fields={}]\tOptionally nested object of fields, referencable from `template`.\r\n *\t@example\r\n *\t\ttemplate('foo{{bar}}', { bar:'baz' }) === 'foobaz'\r\n */\r\nexport default function template(template, fields) {\r\n\tcurrentFields = fields || EMPTY;\r\n\treturn template && template.replace(/\\{\\{([\\w.-]+)\\}\\}/g, replacer);\r\n}\r\n\r\n/** Replacement callback for injecting fields into a String\r\n *\t@private\r\n */\r\nfunction replacer(s, field) {\r\n\tlet parts = field.split('.'),\r\n\t\tv = currentFields;\r\n\tfor (let i=0; i<parts.length; i++) {\r\n\t\tv = v[parts[i]];\r\n\t\tif (v == null) return ''; // eslint-disable-line eqeqeq\r\n\t}\r\n\t// allow for recursive {{config.xx}} references:\r\n\tif (typeof v==='string' && v.match(/\\{\\{/)) {\r\n\t\tv = template(v, currentFields);\r\n\t}\r\n\treturn v;\r\n}\r\n","import delve from 'dlv';\r\nimport { defined } from './util';\r\nimport template from './template';\r\n\r\n/**\r\n * Default function to determine what plural form to use from the provided dictionary\r\n * @param dict the dictorary with possible plural forms\r\n * @param plural the plural count\r\n * @returns {String | false}\r\n */\r\nexport function defaultProvider(dict, plural) {\r\n\t// plural forms:\r\n\t// key: ['plural', 'singular']\r\n\t// key: { none, one, many }\r\n\t// key: { singular, plural }\r\n\tif ((plural || plural === 0) && dict && typeof dict === 'object') {\r\n\t\tif (dict.splice) {\r\n\t\t\treturn dict[plural] || dict[0];\r\n\t\t}\r\n\t\telse if (plural === 0 && defined(dict.none)) {\r\n\t\t\treturn dict.none;\r\n\t\t}\r\n\t\telse if (plural === 1 && defined(dict.one || dict.singular)) {\r\n\t\t\treturn dict.one || dict.singular;\r\n\t\t}\r\n\t\treturn dict.some || dict.many || dict.plural || dict.other || dict;\r\n\t}\r\n}\r\n\r\n/** Attempts to look up a translated value from a given dictionary.\r\n *  Also supports json templating using the format: {{variable}}\r\n *    Falls back to default text.\r\n *\r\n *    @private\r\n *    @param {String} id                Intl field name/id (subject to scope)\r\n *    @param {String} [scope='']        Scope, which prefixes `id` with `${scope}.`\r\n *    @param {Object} dictionary        A nested object containing translations\r\n *    @param {Object} [fields={}]        Template fields for use by translated strings\r\n *    @param {Number} [plural]        Indicates a quantity, used to trigger pluralization\r\n *    @param {String|Array} [fallback]    Text to return if no translation is found\r\n *    @param pluralizer {function: String | false} Provider function to extract the plural form from the dictionary\r\n *    @returns {String} translated\r\n */\r\nexport default function translate(id, scope, dictionary, fields, plural, fallback, pluralizer = defaultProvider) {\r\n\tif (scope) id = scope + '.' + id;\r\n\r\n\tlet value = dictionary && delve(dictionary, id);\r\n\tvalue = plural ? pluralizer(value, plural) || defaultProvider(value, plural): value;\r\n\r\n\treturn value && template(value, fields) || fallback || null;\r\n}\r\n","import { h } from 'preact';\r\nimport delve from 'dlv';\r\n\r\n\r\n/** Highlight/colorize the i18n'd node if `mark` is set on `intl` in context.  If not, just returns `value`\r\n *\r\n *\t@private\r\n *\t@param {String|VNode} value\tThe l10n'd text/vnode to highlight or pass through\r\n *\t@param {string} id\tThe key used to lookup the value in the intl dictionary\r\n */\r\nexport function HighlightI18N({ value, id }, { intl }) {\r\n\r\n\tif (intl && intl.mark) {\r\n\t\tconst dictionaryKey = `dictionary${intl && intl.scope ? `.${intl.scope}` : ''}.${id}`;\r\n\t\treturn (\r\n\t\t\t<mark\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tbackground: value\r\n\t\t\t\t\t\t? delve(intl, dictionaryKey)\r\n\t\t\t\t\t\t\t? 'rgba(119,231,117,.5)'\r\n\t\t\t\t\t\t\t: 'rgba(229,226,41,.5)'\r\n\t\t\t\t\t\t: 'rgba(228,147,51,.5)'\r\n\t\t\t\t}}\r\n\t\t\t\ttitle={id}\r\n\t\t\t>\r\n\t\t\t\t{value}\r\n\t\t\t</mark>\r\n\t\t);\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n","import { h } from 'preact';\r\nimport translate, { defaultProvider } from '../lib/translate';\r\nimport { HighlightI18N } from './highlight-i18n';\r\n\r\n/** `<Text>` renders internationalized text.\r\n *\tIt attempts to look up translated values from a dictionary in context.\r\n *\r\n *\tTemplate strings can contain `{{field}}` placeholders,\r\n *\twhich injects values from the `fields` prop.\r\n *\r\n *\tWhen string lookup fails, renders its children as fallback text.\r\n *\r\n *\t@param {Object} props\t\t\t\tprops\r\n *\t@param {String} props.id\t\t\tKey to look up in intl dictionary, within any parent scopes (`$scope1.$scope2.$id`)\r\n *\t@param {Object} [props.fields={}]\tValues to inject into template `{{fields}}`\r\n *\t@param {Number} [props.plural]\t\tInteger \"count\", used to select plural forms\r\n *\t@param {Object} context\r\n *\t@param {Object} context.intl\t\t[internal] dictionary and scope info\r\n *\r\n *\t@example\r\n *\t// If there is no dictionary in context..\r\n *\t<Text id=\"foo\">The Foo</Text>\r\n *\t// ..produces the text:\r\n *\t\"The Foo\"\r\n *\r\n *\t@example\r\n *\t// Given a dictionary and some fields..\r\n *\t<IntlProvider definition={{ foo:'Le Feux {{bar}}' }}>\r\n *\t\t<Text id=\"foo\" fields={{ bar: 'BEAR' }}>The Foo</Text>\r\n *\t</IntlProvider>\r\n *\t// ..produces the text:\r\n *\t\"Le Feux BEAR\"\r\n *\r\n *\t@example\r\n *\t// Within a scope, both `id` and the definition are namespaced..\r\n *\t<IntlProvider scope=\"weather\" definition={{ foo:'Le Feux' }}>\r\n *\t\t<Text id=\"foo\">The Foo</Text>\r\n *\t</IntlProvider>\r\n *\t// ..produces the text:\r\n *\t\"Le Feux\"\r\n */\r\nexport function Text({ id, children: fallback, plural, fields }, { intl }) {\r\n\r\n\tlet value = translate(\r\n\t\tid,\r\n\t\tintl && intl.scope,\r\n\t\tintl && intl.dictionary,\r\n\t\tfields,\r\n\t\tplural,\r\n\t\tfallback,\r\n\t\tintl && intl.provider || defaultProvider\r\n\t);\r\n\r\n\treturn <HighlightI18N id={id} value={value} />;\r\n}\r\n","import { assign, select } from './util';\r\nimport translate from './translate';\r\nimport { Text } from '../components/text';\r\n\r\n/** Translates the property values in an Object, returning a copy.\r\n *\t**Note:** By default, `String` keys will be treated as Intl ID's.\r\n *\tPass `true` to return an Object containing *only* translated\r\n *\tvalues where the prop is a <Text /> node.\r\n *\r\n *\t@private\r\n *\t@param {Object} props\tAn object with values to translate\r\n *\t@param {Object} intl\tAn intl context object (eg: `context.intl`)\r\n *\t@param {Boolean} [onlyTextNodes=false]\tOnly process `<Text />` values\r\n *\t@returns {Object} translatedProps\r\n */\r\nexport default function translateMapping(props, intl, onlyTextNodes) {\r\n\tlet out = {};\r\n\tintl = intl || {};\r\n\tprops = select(props);\r\n\tfor (let name in props) {\r\n\t\tif (props.hasOwnProperty(name) && props[name]) {\r\n\t\t\tlet def = props[name];\r\n\r\n\t\t\t// if onlyTextNodes=true, skip any props that aren't <Text /> vnodes\r\n\t\t\tif (!onlyTextNodes && typeof def==='string') {\r\n\t\t\t\tout[name] = translate(def, intl.scope, intl.dictionary);\r\n\t\t\t}\r\n\t\t\telse if (def.type===Text) {\r\n\t\t\t\t// it's a <Text />, just grab its props:\r\n\t\t\t\tdef = assign({\r\n\t\t\t\t\t// use children as fallback content\r\n\t\t\t\t\tfallback: def.props.children\r\n\t\t\t\t}, def.props);\r\n\t\t\t\tout[name] = translate(def.id, intl.scope, intl.dictionary, def.fields, def.plural, def.fallback);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn out;\r\n}\r\n","import { cloneElement } from 'preact';\r\nimport translateMapping from '../lib/translate-mapping';\r\n\r\n/** `<Localizer />` is a Compositional Component.\r\n *\tIt \"renders\" out any `<Text />` values in its child's props.\r\n *\r\n *\t@name Localizer\r\n *\t@param {Object} props\r\n *\t@param {Object} props.children\tChild components with props to localize.\r\n *\t@param {Object} context\r\n *\t@param {Object} context.intl\t\t[internal] dictionary and scope info\r\n *\t@example\r\n *\t<Localizer>\r\n *\t\t<input placeholder={<Text id=\"username.placeholder\" />} />\r\n *\t</Localizer>\r\n *\t// produces:\r\n *\t<input placeholder=\"foo\" />\r\n *\r\n *\t@example\r\n *\t<Localizer>\r\n *\t\t<abbr title={<Text id=\"oss-title\">Open Source Software</Text>}>\r\n *\t\t\t<Text id=\"oss\">OSS</Text>\r\n *\t\t</abbr>\r\n *\t</Localizer>\r\n *\t// produces:\r\n *\t<abbr title=\"Open Source Software\">OSS</abbr>\r\n */\r\nexport function Localizer({ children }, { intl }) {\r\n\treturn children && children.length\r\n\t\t? children.map((child) => cloneElement(child, translateMapping(child.props, intl, true)))\r\n\t\t: children && cloneElement(children, translateMapping(children.props, intl, true));\r\n}\r\n","import { h } from 'preact';\r\nimport { Text } from './text';\r\nimport { Localizer } from './localizer';\r\nimport { HighlightI18N } from './highlight-i18n';\r\n\r\n/* eslint-disable react/no-danger */\r\n\r\n/** `<MarkupText>` is just like {@link Text} but it can also contain html markup in rendered strings.  It wraps its contents in a `<span>` tag.\r\n *\r\n *\t@param {Object} props\t\t\t\tprops\r\n *\t@param {String} props.id\t\t\tKey to look up in intl dictionary, within any parent scopes (`$scope1.$scope2.$id`)\r\n *\t@param {Object} [props.fields={}]\tValues to inject into template `{{fields}}`\r\n *\t@param {Number} [props.plural]\t\tInteger \"count\", used to select plural forms\r\n *\t@param {Object} context\r\n *\t@param {Object} context.intl\t\t[internal] dictionary and scope info\r\n *\r\n *\t@example\r\n *\t// If there is no dictionary in context..\r\n *\t<MarkupText id=\"foo\"><b>The Foo</b></MarkupText>\r\n *\t// ..produces the vnode:\r\n *\t<span><b>The Foo</b></span>\r\n *\r\n *\t@example\r\n *\t// Given a dictionary and some fields..\r\n *\t<IntlProvider definition={{ foo:'Le Feux <b>{{bar}}</b>' }}>\r\n *\t\t<MarkupText id=\"foo\" fields={{ bar: 'BEAR' }}>The Foo</MarkupText>\r\n *\t</IntlProvider>\r\n *\t// ..produces the vnode:\r\n *\t<span>Le Feux <b>BEAR</b></span>\r\n *\r\n *\t@example\r\n *\t// Within a scope, both `id` and the definition are namespaced..\r\n *\t<IntlProvider scope=\"weather\" definition={{ foo:'Le <a href=\"http://foo.com\">Feux</a>' }}>\r\n *\t\t<MarkupText id=\"foo\">The Foo</MarkupText>\r\n *\t</IntlProvider>\r\n *\t// ..produces the vnode:\r\n *\t<span>Le <a href=\"http://foo.com\">Feux</a></span>\r\n *\r\n *\t@example\r\n *\t// renders nothing if there is no key match and no fallback\r\n *\t<div><MarkupText /></div>\r\n *\t// ..produces the vnode:\r\n *\t<div/>\r\n */\r\nexport function MarkupText(props) {\r\n\treturn (\r\n\t\t<Localizer>\r\n\t\t\t<Html html={<Text {...props} />} id={props.id} />\r\n\t\t</Localizer>\r\n\t);\r\n}\r\n\r\nfunction Html({ html, id }) {\r\n\tlet value = !html ? html : typeof html === 'string' ? <span dangerouslySetInnerHTML={{ __html: html }} /> : <span>{html}</span> ;\r\n\treturn <HighlightI18N id={id} value={value} />;\r\n}\r\n","import { h } from 'preact';\r\nimport translateMapping from '../lib/translate-mapping';\r\nimport { assign } from '../lib/util';\r\n\r\n/** `@withText()` is a Higher Order Component, often used as a decorator.\r\n *\r\n *\tIt wraps a child component and passes it translations\r\n *\tbased on a mapping to the dictionary & scope in context.\r\n *\r\n *\t@param {Object|Function|String} mapping\t\tMaps prop names to intl keys (or `<Text>` nodes).\r\n *\r\n *\t@example @withText({\r\n *\t\tplaceholder: 'user.placeholder'\r\n *\t})\r\n *\tclass Foo {\r\n *\t\t// now the `placeholder` prop is our localized String:\r\n *\t\trender({ placeholder }) {\r\n *\t\t\treturn <input placeholder={placeholder} />\r\n *\t\t}\r\n *\t}\r\n *\r\n *\t@example @withText({\r\n *\t\tplaceholder: <Text id=\"user.placeholder\">fallback text</Text>\r\n *\t})\r\n *\tclass Foo {\r\n *\t\trender({ placeholder }) {\r\n *\t\t\treturn <input placeholder={placeholder} />\r\n *\t\t}\r\n *\t}\r\n *\r\n *\t@example @withText('user.placeholder')\r\n *\tclass Foo {\r\n *\t\t// for Strings/Arrays, the last path segment becomes the prop name:\r\n *\t\trender({ placeholder }) {\r\n *\t\t\treturn <input placeholder={placeholder} />\r\n *\t\t}\r\n *\t}\r\n *\r\n *\t@example <caption>Works with functional components, too</caption>\r\n *\tconst Foo = withText('user.placeholder')( props =>\r\n *\t\t<input placeholder={props.placeholder} />\r\n *\t)\r\n *\r\n * \t@example <caption>getWrappedComponent() returns wrapped child Component</caption>\r\n *\tconst Foo = () => <div/>;\r\n *\tconst WrappedFoo = withText('user.placeholer')(Foo);\r\n *\tWrappedFoo.getWrappedComponent() === Foo; // true\r\n */\r\nexport function withText(mapping) {\r\n\treturn function withTextWrapper(Child) {\r\n\t\tfunction WithTextWrapper(props, context) {\r\n\t\t\tlet map = typeof mapping==='function' ? mapping(props, context) : mapping;\r\n\t\t\tlet translations = translateMapping(map, context.intl);\r\n\t\t\treturn h(Child, assign(assign({}, props), translations));\r\n\t\t}\r\n\r\n\t\tWithTextWrapper.getWrappedComponent = Child && Child.getWrappedComponent || (() => Child);\r\n\t\treturn WithTextWrapper;\r\n\t};\r\n}\r\n","import { intl } from './intl';\r\nimport { IntlProvider } from './components/intl-provider';\r\nimport { Text } from './components/text';\r\nimport { MarkupText } from './components/markup-text';\r\nimport { Localizer } from './components/localizer';\r\nimport { withText } from './components/with-text';\r\n\r\nexport { intl, IntlProvider, Text, MarkupText, Localizer, withText };\r\n\r\nintl.intl = intl;\r\nintl.IntlProvider = IntlProvider;\r\nintl.Text = Text;\r\nintl.MarkupText = MarkupText;\r\nintl.Localizer = Localizer;\r\nintl.withText = withText;\r\nexport default intl;\r\n"],"names":["let","const"],"mappings":"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"}